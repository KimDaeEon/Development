// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#include "Enum.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
}  // namespace Protocol
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Enum_2eproto[7];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Enum_2eproto = nullptr;
const uint32_t TableStruct_Enum_2eproto::offsets[1] = {};
static constexpr ::_pbi::MigrationSchema* schemas = nullptr;
static constexpr ::_pb::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_Enum_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nEnum.proto\022\010Protocol*_\n\tMoveState\022\023\n\017M"
  "OVE_STATE_NONE\020\000\022\023\n\017MOVE_STATE_IDLE\020\001\022\023\n"
  "\017MOVE_STATE_MOVE\020\002\022\023\n\017MOVE_STATE_JUMP\020\003*"
  "\252\001\n\nWeaponType\022\024\n\020WEAPON_TYPE_NONE\020\000\022 \n\034"
  "WEAPON_TYPE_TWO_HANDED_SWORD\020\001\022 \n\034WEAPON"
  "_TYPE_ONE_HANDED_SWORD\020\002\022\023\n\017WEAPON_TYPE_"
  "BOW\020\003\022\025\n\021WEAPON_TYPE_STAFF\020\004\022\026\n\022WEAPON_T"
  "YPE_DAGGER\020\005*\226\001\n\tArmorType\022\023\n\017ARMOR_TYPE"
  "_NONE\020\000\022\031\n\025ARMOR_TYPE_CHESTPLATE\020\001\022\025\n\021AR"
  "MOR_TYPE_HELMET\020\002\022\025\n\021ARMOR_TYPE_SHIELD\020\003"
  "\022\025\n\021ARMOR_TYPE_GLOVES\020\004\022\024\n\020ARMOR_TYPE_BO"
  "OTS\020\005*z\n\rAccessoryType\022\027\n\023ACCESSORY_TYPE"
  "_NONE\020\000\022\027\n\023ACCESSORY_TYPE_RING\020\001\022\033\n\027ACCE"
  "SSORY_TYPE_NECKLACE\020\002\022\032\n\026ACCESSORY_TYPE_"
  "EARRING\020\003*\202\002\n\016ConsumableType\022\030\n\024CONSUMAB"
  "LE_TYPE_NONE\020\000\022-\n)CONSUMABLE_TYPE_WEAPON"
  "_ENHANCEMENT_SCROLL\020\001\022,\n(CONSUMABLE_TYPE"
  "_ARMOR_ENHANCEMENT_SCROLL\020\002\0220\n,CONSUMABL"
  "E_TYPE_ACCESSORY_ENHANCEMENT_SCROLL\020\003\022\035\n"
  "\031CONSUMABLE_TYPE_STAT_BUFF\020\004\022(\n$CONSUMAB"
  "LE_TYPE_TELEPORTATION_SCROLL\020\005*h\n\nPlayer"
  "Type\022\024\n\020PLAYER_TYPE_NONE\020\000\022\026\n\022PLAYER_TYP"
  "E_KNIGHT\020\001\022\024\n\020PLAYER_TYPE_MAGE\020\002\022\026\n\022PLAY"
  "ER_TYPE_ARCHER\020\003*T\n\013MonsterType\022\025\n\021MONST"
  "ER_TYPE_NONE\020\000\022\027\n\023MONSTER_TYPE_NORMAL\020\001\022"
  "\025\n\021MONSTER_TYPE_BOSS\020\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Enum_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Enum_2eproto = {
    false, false, 1030, descriptor_table_protodef_Enum_2eproto,
    "Enum.proto",
    &descriptor_table_Enum_2eproto_once, nullptr, 0, 0,
    schemas, file_default_instances, TableStruct_Enum_2eproto::offsets,
    nullptr, file_level_enum_descriptors_Enum_2eproto,
    file_level_service_descriptors_Enum_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Enum_2eproto_getter() {
  return &descriptor_table_Enum_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Enum_2eproto(&descriptor_table_Enum_2eproto);
namespace Protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MoveState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[0];
}
bool MoveState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WeaponType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[1];
}
bool WeaponType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArmorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[2];
}
bool ArmorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccessoryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[3];
}
bool AccessoryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsumableType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[4];
}
bool ConsumableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[5];
}
bool PlayerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MonsterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[6];
}
bool MonsterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
