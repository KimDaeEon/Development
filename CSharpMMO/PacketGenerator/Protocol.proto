syntax = "proto3";

package Protocol;
// import "google/protobuf/timestamp.proto"; 
option csharp_namespace = "Google.Protobuf.Protocol";

// 아래부터 공용으로 사용될 패킷용 구조체

enum PlayerServerState {
	SERVER_STATE_LOGIN = 0;
	SERVER_STATE_LOBBY = 1;
	SERVER_STATE_GAME = 2;
}

enum ActorState {
    IDLE = 0;
    MOVING = 1;
	SKILL = 2;
    DEAD = 3;
}

enum ActorType {
	NONE = 0;
	PLAYER = 1;
	MONSTER = 2;
	PROJECTILE = 3; // 투사체, 화살같은 것
}

enum SkillType {
	SKILL_NONE = 0;
	SKILL_AUTO = 1; // 기본(자동)적으로 때리는 평타를 의미
	SKILL_PROJECTILE = 2;
}

enum MoveDir {
    Up = 0;
    Down = 1;
    Left = 2;
    Right = 3;
}

enum ItemType {
	ITEM_TYPE_NONE = 0;
	ITEM_TYPE_WEAPON = 1;
	ITEM_TYPE_ARMOR = 2;
	ITEM_TYPE_CONSUMABLE = 3;
}

enum WeaponType {
	WEAPON_TYPE_NONE = 0;
	WEAPON_TYPE_SWORD = 1;
	WEAPON_TYPE_BOW = 2;
}

enum ArmorType {
	ARMOR_TYPE_NONE = 0;
	ARMOR_TYPE_HEAD = 1;
	ARMOR_TYPE_CHEST = 2;
	ARMOR_TYPE_FOOT = 3;
}

enum ConsumableType {
	CONSUMABLE_TYPE_NONE = 0;
	CONSUMABLE_TYPE_POTION = 1;
}

message LobbyPlayerInfo {
	int32 playerDbId = 1;
	string name = 2;
	StatInfo statInfo = 3; // 클라 입장에선 statInfo 필요 없지만, 서버에서는 있는 것이 좋기에..
}

message ActorInfo {
	int32 actorId = 1;
	string name = 2;
	PositionInfo posInfo = 3;
	StatInfo statInfo = 4;
}

message PositionInfo {
	ActorState state = 1;
	MoveDir moveDir = 2;
	int32 posX = 3;
	int32 posY = 4;
}

message SkillInfo {
	int32 skillId = 1;
}

message StatInfo {
	int32 level = 1;
	int32 hp = 2;
	int32 maxHp = 3;
	int32 attack = 4;
	float speed = 5;
	int32 totalExp = 6;
}

message ItemInfo {
	int32 itemDbId = 1;
	int32 templateId = 2;
	int32 count = 3;
	int32 slotNum = 4;
	bool equipped = 5;
}

// 공용 구조체 정의 끝



// 아래부터 패킷 정보
// 패킷 형식
// S_ 서버 -> 클라이언트로 주는 패킷 prefix
// C_ 클라이언트 -> 서버로 주는 패킷 prefix
// 그 다음은 예시와 같은 형식으로 MsgId Enum 과 패킷 이름을 맞춰야 한다. ex) Enum S_ENTER_GAME 에 대응되는 패킷은 S_EnterGame 이 되어야 함. 

enum MsgId {
// 0 ~ 99 로그인 및 로그아웃, 게임 입장, 서버 이동 관련 패킷
  C_HEART_BEAT = 0; // 클라이언트 연결이 끊겼는지 체크
  S_HEART_BEAT = 1;
  S_ENTER_GAME = 2;
  S_CONNECTED = 3;
  C_LOGIN_DUMMY = 4; // 더미 클라이언트 로그인용 패킷, 릴리즈에서는 작동되면 안된다.
  C_LOGIN = 5; // 실제 로그인 패킷, 토큰 검증 절차가 있다.
  S_LOGIN = 6;
  C_ENTER_GAME = 7;
  C_CREATE_PLAYER = 8;
  S_CREATE_PLAYER = 9;
  S_LEAVE_GAME = 10;

// 100 ~ 인게임 관련 패킷
  S_SPAWN = 100;
  S_DESPAWN = 101;
  C_MOVE = 102;
  S_MOVE = 103;
  C_SKILL = 104;
  S_SKILL = 105;
  S_CHANGE_HP = 106;
  S_DEAD = 107;
  S_ITEM_LIST = 108;
  S_ADD_ITEM = 109;
  C_EQUIP_ITEM = 110;
  S_EQUIP_ITEM = 111;
  S_CHANGE_STAT = 112;
}

message C_HeartBeat {

}

message S_HeartBeat {

}

// TODO: 추후에는 기획에 따라 클래스나 종족 같은 것을 선택하면 좋을 듯 하다.
message C_CreatePlayer {
	string name = 1;
}

message S_CreatePlayer {
	LobbyPlayerInfo player = 1;
}

message S_Connected {
}

message C_LoginDummy {
	string accountName = 1;
}

message C_Login {
	string accountName = 1;
	int32 tokenDbId = 2;
	int32 token = 3;
}

message S_Login {
	bool loginOk = 1;
	repeated LobbyPlayerInfo players = 2;
}

message C_EnterGame {
	string name = 1;
}

// 자신이 게임에 접속했음을 의미
message S_EnterGame {
  ActorInfo player = 1; // 플레이어에게만 전송되기 때문에 명칭을 player 로
}

// 자신이 게임에서 나갈 때를 의미
message S_LeaveGame {
}

// 타인이 게임에 이미 있거나 게임에 들어왔을 때
message S_Spawn {
	repeated ActorInfo actors = 1; // repeated 가 list 를 의미
}

// 타인이 게임에서 나갔을 떄
message S_Despawn {
	repeated int32 actorIds = 1;
}

message C_Move {
	PositionInfo posInfo = 1;
}

message S_Move {
	int32 actorId = 1;
	PositionInfo posInfo = 2;
}

message C_Skill {
	SkillInfo info = 1;
}

message S_Skill {
	int32 actorId = 1;
	SkillInfo info = 2;
}

message S_ChangeHp {
// TODO: 후에는 데미지 플로팅 같은 것을 위해서 더 세분화된 정보를 넣어야 한다. ex_ 사유, 상태
	int32 actorId = 1;
	int32 hp = 2; // 현재 체력 정보
}

message S_Dead {
	int32 actorId = 1; // 죽임당한 actor 의 id
	int32 attackerActorId = 2;
}

message S_ItemList {
	repeated ItemInfo items = 1;
}

// S_ItemList 는 아이템 리스트 전체 갱신, 아래 패킷은 추가용도이다.
message S_AddItem {
	repeated ItemInfo items = 1;
}

message C_EquipItem {
	int32 itemDbId = 1;
	bool equipped = 2; // 해당 무기를 장착했는지, 뺐는지를 의미
}

message S_EquipItem {
	int32 itemDbId = 1;
	bool equipped = 2;
}

message S_ChangeStat {
	StatInfo statInfo = 1;
}
